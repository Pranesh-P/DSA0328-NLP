import random
train_data = [
    [("I", "PRON"), ("love", "VERB"), ("coding", "NOUN")],
    [("He", "PRON"), ("loves", "VERB"), ("Python", "NOUN")],
    [("She", "PRON"), ("is", "VERB"), ("reading", "VERB")],
    [("The", "DET"), ("cat", "NOUN"), ("is", "VERB"), ("sleeping", "VERB")]
]
transition_probs = {}
emission_probs = {}
tag_counts = {}
for sentence in train_data:
    prev_tag = None
    for word, tag in sentence:
        if tag not in emission_probs:
            emission_probs[tag] = {}
        emission_probs[tag][word] = emission_probs[tag].get(word, 0) + 1
        if prev_tag:
            if prev_tag not in transition_probs:
                transition_probs[prev_tag] = {}
            transition_probs[prev_tag][tag] = transition_probs[prev_tag].get(tag, 0) + 1
        
        tag_counts[tag] = tag_counts.get(tag, 0) + 1
        
        prev_tag = tag
for tag, words in emission_probs.items():
    total_tag_count = tag_counts[tag]
    for word, count in words.items():
        emission_probs[tag][word] = count / total_tag_count
for prev_tag, next_tags in transition_probs.items():
    total_prev_tag_count = sum(next_tags.values())
    for next_tag, count in next_tags.items():
        transition_probs[prev_tag][next_tag] = count / total_prev_tag_count
def viterbi(sentence):
    viterbi_table = [{}]
    backpointer = [{}]
    first_word = sentence[0]
    for tag in tag_counts:
        if first_word in emission_probs[tag]:
            viterbi_table[0][tag] = emission_probs[tag][first_word] * transition_probs.get(None, {}).get(tag, 0)
        else:
            viterbi_table[0][tag] = 0
        backpointer[0][tag] = None
    for i in range(1, len(sentence)):
        word = sentence[i]
        viterbi_table.append({})
        backpointer.append({})
        for tag in tag_counts:
            max_prob, best_prev_tag = max(
                (viterbi_table[i-1][prev_tag] * transition_probs.get(prev_tag, {}).get(tag, 0) * emission_probs[tag].get(word, 0), prev_tag)
                for prev_tag in tag_counts
            )
            viterbi_table[i][tag] = max_prob
            backpointer[i][tag] = best_prev_tag

    best_path = []
    best_tag = max(viterbi_table[len(sentence)-1], key=viterbi_table[len(sentence)-1].get)
    best_path.append(best_tag)
    for i in range(len(sentence)-1, 0, -1):
        best_tag = backpointer[i][best_tag]
        best_path.insert(0, best_tag)

    return list(zip(sentence, best_path))

test_sentence = ["I", "love", "Python"]
tags = viterbi(test_sentence)
print(tags)
